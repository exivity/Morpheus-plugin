<script nonce="{{nonce}}" type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script nonce="{{nonce}}">
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback(drawCharts);

    function drawCharts() {
        drawChart('analytics-chart-services', {{{chartData}}});
        drawChart('analytics-chart-categories', {{{categoryChartData}}});
    }

    function drawChart(elementId, chartData) {
        const data = google.visualization.arrayToDataTable(chartData.data);
        const options = {
            ...chartData.options,
            legend: 'none',
            chartArea: {
                width: '80%',
                height: '80%'
            }
        };
        const chart = new google.visualization.PieChart(document.getElementById(elementId));
        chart.draw(data, options);
        generateLegend(chartData, elementId);
    }

    function generateLegend(chartData, elementId) {
        const legendContainer = document.querySelector(`#${elementId}-legend`);
        const colors = chartData.options.colors;
        const data = chartData.data.slice(1); // Exclude headers
        let legendHTML = '<table class="chart-legend-table">';

        data.forEach((row, index) => {
            const color = colors[index % colors.length]; // Wrap colors if more rows than colors
            legendHTML += `
                                <tr>
                                        <td class="legend-cell"><div style="background-color: ${color}; width: 20px; height: 20px;"></div></td>
                                        <td>${row[0]}</td>
                                        <td class="number-cell">{{currencyCode}} ${row[1].toFixed(2)}</td>
                                </tr>
                        `;
        });

        legendHTML += '</table>';
        legendContainer.innerHTML = legendHTML;
    }
</script>
<script nonce="{{nonce}}">
    Handlebars.registerHelper('lookup', function(obj, index) {
        return obj && Array.isArray(obj) ? obj[index] : null;
    });

    document.addEventListener('DOMContentLoaded', function() {
        const reportForm = document.getElementById('reportDateForm');
        const quickSelectButtons = document.querySelectorAll('[data-range]');
        const storedStartDate = sessionStorage.getItem('analyticsTabStartDate');
        const storedEndDate = sessionStorage.getItem('analyticsTabEndDate');
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');

        if (storedStartDate && storedEndDate && (storedStartDate != startDateInput.value && storedEndDate != endDateInput.value)) {
            startDateInput.value = storedStartDate;
            endDateInput.value = storedEndDate;
            
            // Immediately trigger a report update with stored dates
            updateDates(storedStartDate, storedEndDate);
            showNotification('Reload to update report data');
        }

        // Function to format date as YYYY-MM-DD
        function formatDate(date) {
            return date.toISOString().split('T')[0];
        }

        // Function to calculate date range
        function calculateDateRange(days) {
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - days);
            return {
                startDate: formatDate(startDate),
                endDate: formatDate(endDate)
            };
        }

        async function updateDates(startDate, endDate) {
            try {
                // Store dates in sessionStorage for persistence between page loads
                sessionStorage.setItem('analyticsTabStartDate', startDate);
                sessionStorage.setItem('analyticsTabEndDate', endDate);
                
                const response = await fetch(`/plugin/ExivityPluginController/dates?startDate=${startDate}&endDate=${endDate}&reportCode=finops-analytics`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                const result = await response.json();
                
                if (response.ok) {
                    showNotification('Date range updated successfully');
                } else {
                    //showNotification(result.msg || 'Failed to update date range', true);
                    //window.location.reload();
                }
            } catch (error) {
                console.error('Error updating dates:', error);

            }
        }

        // Add click handlers for quick select buttons
        quickSelectButtons.forEach(button => {
            button.addEventListener('click', function() {
                const days = parseInt(this.dataset.range);
                const dates = calculateDateRange(days);
                
                // Update input fields
                document.getElementById('startDate').value = dates.startDate;
                document.getElementById('endDate').value = dates.endDate;
                
                // Trigger the update
                updateDates(dates.startDate, dates.endDate);
                window.location.reload();
            });
        });

        // Handle form submission for custom date range
        if (reportForm) {
            reportForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                if (!startDate || !endDate) {
                    showNotification('Please select both start and end dates', true);
                    return;
                }
                
                if (new Date(startDate) > new Date(endDate)) {
                    showNotification('Start date cannot be after end date', true);
                    return;
                }

                await updateDates(startDate, endDate);
                window.location.reload();
            });
        }

        // Store initial date values
        window.initialStartDate = document.getElementById('startDate').value;
        window.initialEndDate = document.getElementById('endDate').value;
    });

    function showNotification(message, isError = false) {
        const container = document.getElementById('notificationContainer');
        const notification = document.createElement('div');
        notification.className = `alert ${isError ? 'alert-danger' : 'alert-success'}`;
        notification.textContent = message;
        
        container.innerHTML = '';
        container.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
</script>

<h1 style="text-align: center; font-size: 36px;">FinOps Analytics Dashboard</h1>
<div style="display: flex; justify-content: space-between; align-items: center;">
    <div></div> <!-- Empty div for spacing -->
    <img src="{{asset '/exivity-logo.png'}}" alt="Exivity Logo" style="height: 50px; margin-right: 20px;">
</div>
<br>

{{#if authSuccess}}
<div class="break-container intro-stats">
    <div class="count-stats">
        <div class="stats-container">
            <span class="big-stat">
                {{metrics.uniqueInstances}}
            </span>
            <div class="stat-label">Unique Instance Accounts</div>
        </div>

        <div class="stats-container">
            <span class="big-stat">
                {{metrics.uniqueServices}}
            </span>
            <div class="stat-label">Unique Services</div>
        </div>

        <div class="stats-container">
            <span class="big-stat">
                ${{metrics.totalCOGS}}
            </span>
            <div class="stat-label">Sum of COGS</div>
        </div>

        <div class="stats-container">
            <span class="big-stat">
                ${{metrics.totalCharges}}
            </span>
            <div class="stat-label">Sum of Charges</div>
        </div>
    </div>
</div>
<br>
<div class="row">
    <div class="col-md-6">
        <h3 class="center">Total Charges By Service</h3>
        <div class="auto-google-pie-chart">
            <div id="analytics-chart-services" style="width: 280px; height: 280px; margin: 0 auto;"></div>
            <div id="analytics-chart-services-legend" class="chart-legend" style="margin-top: 1px;"></div>
        </div>
    </div>
    <div class="col-md-6">
        <h3 class="center">Total Charges By Category</h3>
        <div class="auto-google-pie-chart">
            <div id="analytics-chart-categories" style="width: 280px; height: 280px; margin: 0 auto;"></div>
            <div id="analytics-chart-categories-legend" class="chart-legend" style="margin-top: 1px;"></div>
        </div>
    </div>
</div>
<br>

{{/if}}

<br>
<div id="notificationContainer" class="mb-4"></div>

<div class="date-controls mb-4">
    <div class="flex items-center space-x-4">
        <!-- Quick select buttons -->
        <div class="btn-group mr-4">
            <button type="button" class="btn btn-default" data-range="7">Last 7 Days</button>
            <button type="button" class="btn btn-default" data-range="30">Last 30 Days</button>
            <button type="button" class="btn btn-default" data-range="90">Last 90 Days</button>
        </div>
        
        <!-- Custom date range form -->
        <form id="reportDateForm" class="flex items-center space-x-4">
            <div class="form-group">
                <label for="startDate">Start:</label>
                <input type="date" id="startDate" name="startDate" class="form-control" value="{{startDate}}" required>
            </div>
            <div class="form-group">
                <label for="endDate">End:</label>
                <input type="date" id="endDate" name="endDate" class="form-control" value="{{endDate}}" required>
            </div>
            <button type="submit" class="btn btn-primary">Update Report</button>
        </form>
    </div>
</div>

<br>

{{#if authSuccess}}
    <h2>FinOps Report Data</h2>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <!-- <th>Instance Key</th> -->
                <th>Instance Name</th>
                <th>Service</th>
                <th>Rate</th>
                <th>Interval</th>
                <th>Total Quantity</th>
                <th>Unit</th>
                <th>Total COGS</th>
                <th>Total Charge</th>
            </tr>
        </thead>
        <tbody>
            {{#each reportData.meta.report}}
                {{#if account_key}}
                    <tr>
                        <!-- <td>{{account_key}}</td> -->
                        <td>{{account_name}}</td>
                        <td>{{service_description}}</td>
                        <td>
                            <script nonce="{{nonce}}">
                                document.currentScript.parentNode.textContent =
                                    parseFloat("{{avg_unit_based_rate}}").toFixed(6) + " {{currencyCode}}";
                            </script>
                        </td>
                        <td>{{service_interval}}</td>
                        <td>
                            <script nonce="{{nonce}}">
                                document.currentScript.parentNode.textContent =
                                    parseFloat("{{total_quantity}}").toFixed(3);
                            </script>
                        </td>
                        <td>{{service_unit_label}}</td>
                        <td>
                            <script nonce="{{nonce}}">
                                document.currentScript.parentNode.textContent =
                                    parseFloat("{{total_cogs}}").toFixed(3) + " {{currencyCode}}";
                            </script>
                        </td>
                        <td>
                            <script nonce="{{nonce}}">
                                document.currentScript.parentNode.textContent =
                                    parseFloat("{{total_charge}}").toFixed(3) + " {{currencyCode}}";
                            </script>
                        </td>
                    </tr>
                {{/if}}
            {{/each}}
        </tbody>
    </table>
{{else}}
    <div class="alert alert-danger">
        <strong>Authentication Error</strong>
        <p>Failed to authenticate with Exivity API</p>
        <strong>Configured Exivity URL:</strong> <span id="exivityUrl">{{exivityUrl}}</span><br>
        <strong>Username:</strong> <span id="exivityUsername">{{exivityUsername}}</span>
        <dl>
            <dt>Error Message:</dt>
            <dd>{{authErrorMessage}}</dd>
            {{#if authResponseCode}}
                <dt>Response Code:</dt>
                <dd>{{authResponseCode}}</dd>
            {{/if}}
        </dl>
    </div>
{{/if}}

<style nonce="{{nonce}}">
    .intro-stats .count-stats {
        display: -webkit-flex;
        display: -moz-flex;
        display: -ms-flexbox;
        display: -ms-flex;
        display: flex;
        -webkit-flex-direction: row;
        -moz-flex-direction: row;
        -ms-flex-direction: row;
        flex-direction: row;
        -webkit-justify-content: space-around;
        -moz-justify-content: space-around;
        -ms-justify-content: space-around;
        justify-content: space-around;
    }

    .intro-stats .count-stats div .big-stat {
        text-align: center;
        font-size: 32px;
        padding-bottom: 0;
        line-height: 35px;
        display: block;
        margin-top: 19px;
    }

    .intro-stats .count-stats div .stat-label {
        font-size: 15px;
        text-align: center;
        text-transform: uppercase;
        display: block;
    }
</style>
