<script nonce="{{nonce}}">
    document.addEventListener('DOMContentLoaded', function () {
        const reportForm = document.getElementById('reportDateForm');
        const quickSelectButtons = document.querySelectorAll('[data-range]');
        const storedStartDate = sessionStorage.getItem('instanceTabStartDate');
        const storedEndDate = sessionStorage.getItem('instanceTabEndDate');
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');

        if (
            storedStartDate &&
            storedEndDate &&
            (storedStartDate != startDateInput.value && storedEndDate != endDateInput.value)
        ) {
            startDateInput.value = storedStartDate;
            endDateInput.value = storedEndDate;

            // Immediately trigger a report update with stored dates
            updateDates(storedStartDate, storedEndDate);
            showNotification('Reload to update report data');
        }

        // Function to format date as YYYY-MM-DD
        function formatDate(date) {
            return date.toISOString().split('T')[0];
        }

        // Function to calculate date range
        function calculateDateRange(days) {
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - days);
            return {
                startDate: formatDate(startDate),
                endDate: formatDate(endDate)
            };
        }

        async function updateDates(startDate, endDate) {
            try {
                // Store dates in sessionStorage for persistence between page loads
                sessionStorage.setItem('instanceTabStartDate', startDate);
                sessionStorage.setItem('instanceTabEndDate', endDate);

                const response = await fetch(
                    `/plugin/ExivityPluginController/dates?startDate=${startDate}&endDate=${endDate}&instanceId={{instance.id}}`,
                    {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            Accept: 'application/json'
                        }
                    }
                );

                const result = await response.json();

                if (response.ok) {
                    showNotification('Date range updated successfully');
                } else {
                    //showNotification(result.msg || 'Failed to update date range', true);
                    //window.location.reload();
                }
            } catch (error) {
                console.error('Error updating dates:', error);
                //showNotification('Error updating date range', true);
            }
        }

        // Add click handlers for quick select buttons
        quickSelectButtons.forEach((button) => {
            button.addEventListener('click', function () {
                const days = parseInt(this.dataset.range);
                const dates = calculateDateRange(days);

                // Update input fields
                document.getElementById('startDate').value = dates.startDate;
                document.getElementById('endDate').value = dates.endDate;

                // Trigger the update
                updateDates(dates.startDate, dates.endDate);
                window.location.reload();
            });
        });

        // Handle form submission for custom date range
        if (reportForm) {
            reportForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;

                if (!startDate || !endDate) {
                    showNotification('Please select both start and end dates', true);
                    return;
                }

                if (new Date(startDate) > new Date(endDate)) {
                    showNotification('Start date cannot be after end date', true);
                    return;
                }

                await updateDates(startDate, endDate);
                window.location.reload();
            });
        }

        // Store initial date values
        window.initialStartDate = document.getElementById('startDate').value;
        window.initialEndDate = document.getElementById('endDate').value;
    });

    function showNotification(message, isError = false) {
        const container = document.getElementById('notificationContainer');
        const notification = document.createElement('div');
        notification.className = `alert ${isError ? 'alert-danger' : 'alert-success'}`;
        notification.textContent = message;

        container.innerHTML = '';
        container.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
</script>

<h1 style="text-align: center; font-size: 36px;">FinOps Overview</h1>
<div style="display: flex; justify-content: space-between; align-items: center;">
    <div></div> <!-- Empty div for spacing -->
    <img src="{{asset '/exivity-logo.png'}}" alt="Exivity Logo" style="height: 50px; margin-right: 20px;">
</div>

<br>

<!-- HTML for the date controls -->
<div id="notificationContainer" class="mb-4"></div>

<div class="date-controls mb-4">
    <div class="flex items-center space-x-4">
        <!-- Quick select buttons -->
        <div class="btn-group mr-4">
            <button type="button" class="btn btn-default" data-range="7">Last 7 Days</button>
            <button type="button" class="btn btn-default" data-range="30">Last 30 Days</button>
            <button type="button" class="btn btn-default" data-range="90">Last 90 Days</button>
        </div>

        <!-- Custom date range form -->
        <form id="reportDateForm" class="flex items-center space-x-4">
            <div class="form-group">
                <label for="startDate">Start:</label>
                <input type="date" id="startDate" name="startDate" class="form-control" value="{{startDate}}" required>
            </div>
            <div class="form-group">
                <label for="endDate">End:</label>
                <input type="date" id="endDate" name="endDate" class="form-control" value="{{endDate}}" required>
            </div>
            <button type="submit" class="btn btn-primary">Update Report</button>
        </form>
    </div>
</div>

<br>

{{#if authSuccess}}
    <h2>FinOps Report Data for Instance {{instance.getUuid}}</h2>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Instance Key</th>
                <th>Instance Name</th>
                <th>Current Status</th>
                <th>Service</th>
                <th>Rate</th>
                <th>Interval</th>
                <th>Total Quantity</th>
                <th>Unit</th>
                <th>Total COGS</th>
                <th>Total Charge</th>
            </tr>
        </thead>
        <tbody>
            {{#each reportData.meta.report}}
                {{#if account_key}}
                    <tr>
                        <td>{{account_key}}</td>
                        <td>{{account_name}}</td>
                        <td>{{../instance.status}}</td>
                        <td>{{service_description}}</td>
                        <td>{{avg_unit_based_rate}}</td>
                        <td>{{service_interval}}</td>
                        <td>{{total_quantity}}</td>
                        <td>{{service_unit_label}}</td>
                        <td>{{total_cogs}}</td>
                        <td>{{total_charge}}</td>
                    </tr>
                {{/if}}
            {{/each}}
        </tbody>
    </table>
{{else}}
    <div class="alert alert-danger">
        <strong>Authentication Error</strong>
        <p>Failed to authenticate with Exivity API</p>
        <strong>Configured Exivity URL:</strong> <span id="exivityUrl">{{exivityUrl}}</span><br>
        <strong>Username:</strong> <span id="exivityUsername">{{exivityUsername}}</span>
        <dl>
            <dt>Error Message:</dt>
            <dd>{{authErrorMessage}}</dd>
            {{#if authResponseCode}}
                <dt>Response Code:</dt>
                <dd>{{authResponseCode}}</dd>
            {{/if}}
        </dl>
    </div>
{{/if}}

<div></div>

<div style="text-align: center; margin-top: 20px;">
    <a href="{{exivityUrl}}" target="_blank" class="pretty-button">
        Access Exivity
    </a>
</div>

<style>
    .pretty-button {
        /* Basic button styling */
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        text-decoration: none;
        color: #ffffff;
        background-color: #4CAF50; /* Green background */
        border: none;
        border-radius: 5px;
        transition: all 0.3s ease 0s;
        cursor: pointer;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .pretty-button:hover {
        /* Hover effect */
        background-color: #45a049; /* Darker green on hover */
        transform: translateY(-2px);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
    }

    .pretty-button:active {
        /* Active state */
        background-color: #3e8e41;
        transform: translateY(1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>